{"version":3,"sources":["webpack://openseadragon-imaginghelper/webpack/universalModuleDefinition","webpack://openseadragon-imaginghelper/webpack/bootstrap","webpack://openseadragon-imaginghelper/external \"openseadragon\"","webpack://openseadragon-imaginghelper/./src/imaginghelper.js"],"names":["OSD","tiledImage","this","_viewer","world","getItemAt","_haveImage","imgWidth","imgHeight","imgAspectRatio","_trackZoomPan","options","imagingHelper","$","_worldIndex","_zoomFactor","_minZoom","_maxZoom","_zoomStepPercent","_viewerSize","_viewportWidth","_viewportHeight","_viewportOrigin","OpenSeadragon","_viewportCenter","addHandler","versionStr","versionSplits","parseInt","_raiseImageViewChanged","raiseEvent","viewportWidth","viewportHeight","viewportOrigin","viewportCenter","zoomFactor","boundsRect","viewport","x","y","getViewerContainerSize","element","notifyResize","newViewerSize","center","zoom","resize","zoomTo","panTo","getMinZoom","setMinZoom","minZoomLevel","value","getMaxZoom","setMaxZoom","maxZoomLevel","getZoomStepPercent","setZoomStepPercent","setView","centerpoint","getZoomFactor","setZoomFactor","zoomIn","newzoom","zoomOut","zoomAboutLogicalPoint","newzoomfactor","logpoint","zoomInAboutLogicalPoint","zoomOutAboutLogicalPoint","centerAboutLogicalPoint","physicalToLogicalPoint","physicalToLogicalX","point","physicalToLogicalY","logicalToPhysicalPoint","logicalToPhysicalX","logicalToPhysicalY","physicalToLogicalDistance","distance","logicalToPhysicalDistance","logicalToDataPoint","logicalToDataX","logicalToDataY","dataToLogicalPoint","dataToLogicalX","dataToLogicalY","physicalToDataPoint","physicalToDataX","physicalToDataY","dataToPhysicalPoint","dataToPhysicalX","dataToPhysicalY","window"],"mappings":";CAAA,cACA,kDACA,2CACA,sCACA,4BACA,yBACA,mEAEA,oDARA,CASC,oBACD,O,YCNA,cAGA,QACA,oBAGA,YACA,IACA,KACA,YAUA,OANC,EAAD,iCAGA,OAGA,UAvBA,SAiFA,OArDC,EAAD,IAGA,MAGA,oBACA,UACA,2BAA0C,uBAK1C,gBACA,gDACA,4CAAwD,iBAExD,sCAAiD,YAQjD,kBAEA,GADA,cACA,aACA,qDACA,0BAGA,GAFA,OACA,mCAAyC,wBACzC,2DAAgH,aAAqB,UAArI,IACA,UAIA,gBACA,sBACA,WAA2B,kBAC3B,WAAiC,UAEjC,OADC,EAAD,WACA,GAIA,kBAAsD,kDAGtD,OAIA,S,cClFA,a,6BAAA,O,IAAA,gBCqCgB,wBA2qBf,SAAS,IACRA,8BACA,IAAIC,EAAaC,KAAKC,QAAQC,MAAMC,UAAUH,KAA9C,aAEAA,KAAKI,YAAL,EACAJ,KAAKK,SAAWN,oBAAhB,EACAC,KAAKM,UAAYP,oBAAjB,EACAC,KAAKO,eAAiBP,KAAKK,SAAWL,KAAtC,UAEAA,KAAKQ,gBAQN,SAAS,IACRV,+BACAE,KAAKI,YAAL,EACAJ,KAAKK,SAAL,EACAL,KAAKM,UAAL,EACAN,KAAKO,eAAL,EAQD,SAAS,IACRP,KAAKQ,gBAQN,SAAS,IACRR,KAAKQ,gBAQN,SAAS,IACJR,KAAKC,SAAWD,KAAKC,QAAzB,YACCD,KAAKQ,gBASP,SAAS,IACRR,KAAKQ,gBAQN,SAAS,IACRR,KAAKQ,gBAQN,SAAS,IAERV,cAF8B,wBAW/B,SAAS,IACRA,cADiC,2BAUlC,SAAS,IACRA,cADsC,gCAUvC,SAAS,IACRA,cADoC,8BArxBrC,IAAKA,EAAD,SAAJ,EAAoBA,gBACnB,MAAM,UAAN,oEAcDA,yCAA6C,YAM5C,OALKE,KAAL,iBACCS,EAAUA,GAAVA,IACAA,YACAT,KAAKU,cAAgB,IAAIC,EAAzB,cAAqB,IAEfX,KAAP,eAgBDW,gBAAkB,YAGjB,KAFAF,EAAUA,GAAVA,IAEA,OACC,MAAM,UAAN,+BAED,GAAIA,SAAJ,cACC,MAAM,UAAN,wCAGDT,KAAKC,QAAUQ,EAAf,OAGCT,KAAKY,YADN,iBAAWH,EAAP,WACgBA,EAAnB,WAEA,EAIDX,mBAnBoC,MAsBpCE,KAAKC,QAAQS,cAAbV,KASAA,KAAKS,QAAL,EAMAT,KAAKK,SAAL,EAMAL,KAAKM,UAAL,EAMAN,KAAKO,eAjD+B,EAoDpCP,KAAKa,YAAL,EACAb,KAAKc,SAAL,KACAd,KAAKe,SAAL,GACAf,KAAKgB,iBAAL,GACAhB,KAAKI,YAAL,EACAJ,KAAKiB,YAzD+B,KA4DpCjB,KAAKkB,eAAL,EACAlB,KAAKmB,gBAAL,EACAnB,KAAKoB,gBAAkB,IAAIC,IAAJ,QAAvB,GACArB,KAAKsB,gBAAkB,IAAID,IAAJ,QA/Da,GAkEhCZ,EAAJ,oBACCT,KAAKuB,WAAW,qBAAsBd,EAAtC,oBAEDT,KAAKC,QAAQsB,WAAW,OAAQzB,WAAhCE,KAAgCF,IAChCE,KAAKC,QAAQsB,WAAW,QAASzB,WAAjCE,KAAiCF,IACjCE,KAAKC,QAAQsB,WAAW,YAAazB,WAArCE,KAAqCF,IACrCE,KAAKC,QAAQsB,WAAW,mBAAoBzB,WAA5CE,KAA4CF,IAC5CE,KAAKC,QAAQsB,WAAW,SAAUzB,WAAlCE,KAAkCF,IAClCE,KAAKC,QAAQsB,WAAW,YAAazB,WAArCE,KAAqCF,IACrCE,KAAKC,QAAQsB,WAAW,cAAezB,WAAvCE,KAAuCF,IAEvCE,KAAKC,QAAQC,MAAMqB,WAAW,WAAYzB,WAA1CE,KAA0CF,IAC1CE,KAAKC,QAAQC,MAAMqB,WAAW,cAAezB,WAA7CE,KAA6CF,IAC7CE,KAAKC,QAAQC,MAAMqB,WAAW,oBAAqBzB,WAAnDE,KAAmDF,IACnDE,KAAKC,QAAQC,MAAMqB,WAAW,iBAAkBzB,WAAhDE,KAAgDF,KAWjDa,wBAA0B,CACzBa,WAAY,SAEb,IAAIC,EAAgBd,yCAApB,KAupBA,OAtpBAA,8BAAgCe,SAASD,EAAD,GAAxCd,IACAA,8BAAgCe,SAASD,EAAD,GAAxCd,IACAA,iCAAmCe,SAASD,EAAD,GAxIV,IAkJjC3B,SAAWa,gBAAXb,UAAsCA,cAAtCA,UAEA,CASC6B,uBAAwB,WAcvB3B,KAAK4B,WAAW,qBAAsB,CACrCC,cAAgB7B,KADqB,eAErC8B,eAAgB9B,KAFqB,gBAGrC+B,eAAgB/B,KAHqB,gBAIrCgC,eAAgBhC,KAJqB,gBAKrCiC,WAAgBjC,KAAKa,eAavBL,cAAe,WACd,IAAI0B,EAAalC,KAAKC,QAAQkC,SAA9B,WAAiB,GACjBnC,KAAKoB,gBAAgBgB,EAAIF,EAAzB,EACAlC,KAAKoB,gBAAgBiB,EAAIH,IAAelC,KAAxC,eACAA,KAAKkB,eAAiBgB,EAAtB,MACAlC,KAAKmB,gBAAkBe,SAAoBlC,KAA3C,eACAA,KAAKsB,gBAAgBc,EAAIpC,KAAKoB,gBAAgBgB,EAAKpC,KAAKkB,eAAxD,EACAlB,KAAKsB,gBAAgBe,EAAIrC,KAAKoB,gBAAgBiB,EAAKrC,KAAKmB,gBAAxD,EACAnB,KAAKa,YAAcb,KAAKsC,yBAAyBF,GAAKpC,KAAKkB,eAAiBlB,KAA5E,UAEAA,KAAK2B,0BAUNW,uBAAwB,WAEvB,IAAIC,EAAUvC,KAAKC,QAFgB,UAOnC,OAAO,IAAIH,EAAJ,MAAcyC,EAAd,YAAmCA,EAA1C,eAYDC,aAAc,WACb,IAAI,EAAJ,IAGIxC,KAAJ,eACCyC,EAAgBzC,KAAhByC,0BACKA,OAAqBzC,KAA1B,eACCA,KAAKiB,YAAL,EACAyB,EAAS,IAAIrB,IAAJ,MAAwBrB,KAAKsB,gBAA7B,EAAgDtB,KAAKsB,gBAAgBe,EAAIrC,KAAlF0C,gBACAC,EAAO3C,KAAP2C,YACA3C,KAAKC,QAAQkC,SAASS,OAAO,GAA7B,GACA5C,KAAKC,QAAQkC,SAASU,OAAQF,EAAO3C,KAAR,SAAyByC,EAAtD,WACAzC,KAAKC,QAAQkC,SAASW,MAAM,GAA5B,GACA9C,KAAK2B,4BAYRoB,WAAY,WACX,OAAO/C,KAAP,UAUDgD,WAAY,YACXhD,KAAKc,SAAL,EACAd,KAAKC,QAAQgD,aAAgBC,EAAQlD,KAAT,SAA0BA,KAAKsC,yBAA3D,GAUDa,WAAY,WACX,OAAOnD,KAAP,UAUDoD,WAAY,YACXpD,KAAKe,SAAL,EACAf,KAAKC,QAAQoD,aAAgBH,EAAQlD,KAAT,SAA0BA,KAAKsC,yBAA3D,GAUDgB,mBAAoB,WACnB,OAAOtD,KAAP,kBAUDuD,mBAAoB,YACnBvD,KAAKgB,iBAAL,GAaDwC,QAAS,kBACJxD,KAAJ,cACKA,KAAKkB,iBAAL,GAAiClB,KAArC,kBAAqC,IACpCA,KAAKC,QAAQkC,SAASU,OAAO,EAA7B,WAEG7C,KAAKsB,gBAAgBc,IAAMqB,EAA3B,GAA4CzD,KAAKsB,gBAAgBe,IAAMoB,EAA3E,IACCzD,KAAKC,QAAQkC,SAASW,MAAM,IAAIzB,IAAJ,MAAwBoC,EAAxB,EAAuCA,IAAgBzD,KAAnF,qBAYH0D,cAAe,WACd,OAAO1D,KAAP,aAWD2D,cAAe,cACV3D,KAAKI,YAAc8C,IAAUlD,KAA7B,aAAJ,EAAqDkD,GACpDlD,KAAKC,QAAQkC,SAASU,OAAQK,EAAQlD,KAAT,SAA0BA,KAAKsC,yBAA5D,EACE,IAAIjB,IAAJ,MAAwBrB,KAAKsB,gBAA7B,EAAgDtB,KAAKsB,gBAAgBe,EAAIrC,KAD3E,oBAYF4D,OAAQ,YACP,IAAIC,EAAU7D,KAAd,aACA6D,GAAY,EAAM7D,KAAKgB,iBAAvB6C,KACc7D,KAAd,WACC6D,EAAU7D,KAAV6D,UAED7D,KAAK2D,cAAc,EAAnB,IAUDG,QAAS,YACR,IAAID,EAAU7D,KAAd,aACA6D,GAAY,EAAM7D,KAAKgB,iBAAvB6C,KACc7D,KAAd,WACC6D,EAAU7D,KAAV6D,UAED7D,KAAK2D,cAAc,EAAnB,IAYDI,sBAAuB,gBAClB/D,KAAKI,YAAc4D,IAAkBhE,KAArC,aAAJ,EAA6DgE,GAC5DhE,KAAKC,QAAQkC,SAASU,OAAQmB,EAAgBhE,KAAjB,SAAkCA,KAAKsC,yBAApE,EACG,IAAIjB,IAAJ,MAAwB4C,EAAxB,EAAoCA,IAAajE,KADpD,oBAaFkE,wBAAyB,cACxB,IAAIL,EAAU7D,KAAd,aACA6D,GAAY,EAAM7D,KAAKgB,iBAAvB6C,KACc7D,KAAd,WACC6D,EAAU7D,KAAV6D,UAED7D,KAAK+D,sBAAsB,EAA3B,MAWDI,yBAA0B,cACzB,IAAIN,EAAU7D,KAAd,aACA6D,GAAY,EAAM7D,KAAKgB,iBAAvB6C,KACc7D,KAAd,WACC6D,EAAU7D,KAAV6D,UAED7D,KAAK+D,sBAAsB,EAA3B,MAWDK,wBAAyB,cACpBpE,KAAKI,aAAeJ,KAAKsB,gBAAgBc,IAAM6B,EAA3B,GAAyCjE,KAAKsB,gBAAgBe,IAAM4B,EAA5F,IACCjE,KAAKC,QAAQkC,SAASW,MAAM,IAAIzB,IAAJ,MAAwB4C,EAAxB,EAAoCA,IAAajE,KAA7E,oBAUFqE,uBAAwB,YACvB,OAAO,IAAIhD,IAAJ,MAAwBrB,KAAKsE,mBAAmBC,EAAhD,GAA0DvE,KAAKwE,mBAAmBD,EAAzF,KASDE,uBAAwB,YACvB,OAAO,IAAIpD,IAAJ,MAAwBrB,KAAK0E,mBAAmBH,EAAhD,GAA0DvE,KAAK2E,mBAAmBJ,EAAzF,KASDD,mBAAoB,YACnB,OAAOtE,KAAA,WAAmBA,KAAKoB,gBAAgBgB,EAAMA,EAAIpC,KAAKsC,yBAAV,EAAwCtC,KAArF,eAAP,GASDwE,mBAAoB,YACnB,OAAOxE,KAAA,WAAmBA,KAAKoB,gBAAgBiB,EAAMA,EAAIrC,KAAKsC,yBAAV,EAAwCtC,KAArF,gBAAP,GASD0E,mBAAoB,YACnB,OAAO1E,KAAA,YAAqBoC,EAAIpC,KAAKoB,gBAAV,GAA+BpB,KAAhC,eAAuDA,KAAKsC,yBAA/E,EAAP,GASDqC,mBAAoB,YACnB,OAAO3E,KAAA,YAAqBqC,EAAIrC,KAAKoB,gBAAV,GAA+BpB,KAAhC,gBAAwDA,KAAKsC,yBAAhF,EAAP,GASDsC,0BAA2B,YAC1B,OAAO5E,KAAA,WAAoB6E,EAAW7E,KAAKsC,yBAAjB,EAA+CtC,KAAlE,eAAP,GASD8E,0BAA2B,YAC1B,OAAO9E,KAAA,WAAoB6E,EAAW7E,KAAZ,eAAmCA,KAAKsC,yBAA3D,EAAP,GASDyC,mBAAoB,YACnB,OAAO,IAAI1D,IAAJ,MAAwBrB,KAAKgF,eAAeT,EAA5C,GAAsDvE,KAAKiF,eAAeV,EAAjF,KASDW,mBAAoB,YACnB,OAAO,IAAI7D,IAAJ,MAAwBrB,KAAKmF,eAAeZ,EAA5C,GAAsDvE,KAAKoF,eAAeb,EAAjF,KASDc,oBAAqB,YACpB,WAAIrF,KAAA,6BACI,IAAIqB,IAAJ,MAAwBrB,KAAKsF,gBAAgBf,EAA7C,GAAuDvE,KAAKuF,gBAAgBhB,EAAnF,IAEiBvE,KAAKC,QAAQC,MAAMC,UAAUH,KAA9C,aACA,gCAAOD,IAUTyF,oBAAqB,YACpB,OAAO,IAAInE,IAAJ,MAAwBrB,KAAKyF,gBAAgBlB,EAA7C,GAAuDvE,KAAK0F,gBAAgBnB,EAAnF,KASDS,eAAgB,YACf,OAAOhF,KAAA,WAAmBoC,EAAIpC,KAAvB,SAAP,GASDiF,eAAgB,YACf,OAAOjF,KAAA,WAAmBqC,EAAIrC,KAAvB,UAAP,GASDmF,eAAgB,YACf,OAAQnF,KAAA,YAAD,EAAoBA,KAAA,SAAsBoC,EAAIpC,KAA9C,SAAP,GASDoF,eAAgB,YACf,OAAQpF,KAAA,YAAD,EAAoBA,KAAA,UAAuBqC,EAAIrC,KAA/C,UAAP,GASDsF,gBAAiB,YAChB,WAAItF,KAAA,6BACKA,KAAA,YAAD,EAAoBA,KAAA,4BAAyCA,KAAKoB,gBAAgBgB,EAAMA,EAAIpC,KAAKsC,yBAAV,EAAwCtC,KAAnE,gBAA2FA,KAAvJ,SAAP,EAEiBA,KAAKC,QAAQC,MAAMC,UAAUH,KAA9C,aACSD,gCAA2C,IAAIsB,IAAJ,QAF9C,IAGN,GAUFkE,gBAAiB,YAChB,WAAIvF,KAAA,6BACKA,KAAA,YAAD,EAAoBA,KAAA,4BACtBA,KAAKoB,gBAAgBiB,EAAMA,EAAIrC,KAAKsC,yBAAV,EAAwCtC,KAAnE,iBAA4FA,KADzF,UAAP,EAGiBA,KAAKC,QAAQC,MAAMC,UAAUH,KAA9C,aACSD,gCAA2C,IAAIsB,IAAJ,MAF9C,EAE8C,IACpD,GAUFoE,gBAAiB,YAChB,OAAQzF,KAAA,YAAD,EAAoBA,KAAA,UAAyBoC,EAAIpC,KAAL,SAAsBA,KAAKoB,gBAA5B,GAAiDpB,KAAlD,eAAyEA,KAAKsC,yBAAxH,EAAP,GASDoD,gBAAiB,YAChB,OAAQ1F,KAAA,YAAD,EAAoBA,KAAA,WAA0BqC,EAAIrC,KAAL,UAAuBA,KAAKoB,gBAA7B,GAAkDpB,KAAnD,gBAA2EA,KAAKsC,yBAA3H,EAAP,KA4HK3B,EAAP,cA5xBe,CA6xBdU,KAAiBsE,OA7xBH,cA6xByBA,OAAOA,qBAAuBA,OAAOA,sBA7xB9E,O","file":"openseadragon-imaginghelper.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"openseadragon\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"openseadragon\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"openseadragon-imaginghelper\"] = factory(require(\"openseadragon\"));\n\telse\n\t\troot[\"openseadragon-imaginghelper\"] = factory(root[\"openseadragon\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","/*\n * Copyright (c) 2013-2018 Mark Salsbery\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\n * this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n * the Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport OpenSeadragon from 'openseadragon';\n\n/**\n * @file\n * @version  @openseadragon-imaging/openseadragon-imaginghelper 2.1.1\n * @author Mark Salsbery <msalsbery@hotmail.com>\n *\n */\n\n/**\n * @module openseadragon-imaginghelper\n * @version  @openseadragon-imaging/openseadragon-imaginghelper 2.1.1\n *\n */\n\n\nexport default (function (OSD, $) {\n\n\tif (!OSD.version || OSD.version.major < 2) {\n\t\tthrow new Error('OpenSeadragonImagingHelper requires OpenSeadragon version 2.0.0+');\n\t}\n\n\t/**\n\t * Creates a new ImagingHelper attached to the viewer.\n\t *\n\t * @method activateImagingHelper\n\t * @memberof external:\"OpenSeadragon.Viewer\"#\n\t * @param {Object} options\n\t * @param {OpenSeadragon.EventHandler} [options.onImageViewChanged] - {@link OpenSeadragonImaging.ImagingHelper.event:image-view-changed} handler method.\n\t * @param {Integer} [options.worldIndex] - The index of the image for world.getItemAt\n\t * @returns {OpenSeadragonImaging.ImagingHelper}\n\t *\n\t **/\n\tOSD.Viewer.prototype.activateImagingHelper = function (options) {\n\t\tif (!this.imagingHelper) {\n\t\t\toptions = options || {};\n\t\t\toptions.viewer = this;\n\t\t\tthis.imagingHelper = new $.ImagingHelper(options);\n\t\t}\n\t\treturn this.imagingHelper;\n\t};\n\n\t/**\n\t * Creates a new ImagingHelper attached to the viewer instance passed in the options parameter.\n\t *\n\t * @class ImagingHelper\n\t * @classdesc Provides imaging helper methods and properties for the OpenSeadragon viewer.\n\t * @memberof OpenSeadragonImaging\n\t * @extends external:\"OpenSeadragon.EventSource\"\n\t * @param {Object} options\n\t * @param {external:\"OpenSeadragon.Viewer\"} options.viewer - Required! Reference to OpenSeadragon viewer to attach to.\n\t * @param {external:\"OpenSeadragon.EventHandler\"} [options.onImageViewChanged] - {@link OpenSeadragonImaging.ImagingHelper.event:image-view-changed} handler method.\n\t * @param {Integer} [options.worldIndex] - The index of the image for world.getItemAt\n\t *\n\t **/\n\t$.ImagingHelper = function (options) {\n\t\toptions = options || {};\n\n\t\tif (!options.viewer) {\n\t\t\tthrow new Error('A viewer must be specified.');\n\t\t}\n\t\tif (options.viewer.imagingHelper) {\n\t\t\tthrow new Error('Viewer already has an ImagingHelper.');\n\t\t}\n\n\t\tthis._viewer = options.viewer;\n\n\t\tif (typeof options.worldIndex === 'number') {\n\t\t\tthis._worldIndex = options.worldIndex;\n\t\t} else {\n\t\t\tthis._worldIndex = 0;\n\t\t}\n\n\t\t// Call base class constructor\n\t\tOSD.EventSource.call(this);\n\n\t\t// Add this object to the Viewer\n\t\tthis._viewer.imagingHelper = this;\n\n\t\t/**\n\t\t * A reference to the options passed at creation.\n\t\t * @member {object} options\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t * @property {external:\"OpenSeadragon.Viewer\"} viewer - Reference to OpenSeadragon viewer this ImagingHelper is attached to.\n\t\t * @property {OpenSeadragon.EventHandler} [onImageViewChanged] - {@link OpenSeadragonImaging.ImagingHelper.event:image-view-changed} handler method.\n\t\t */\n\t\tthis.options = options;\n\t\t/**\n\t\t * The image's native width in pixels.\n\t\t * @member {number} imgWidth\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t */\n\t\tthis.imgWidth = 0.0;\n\t\t/**\n\t\t * The image's native height in pixels.\n\t\t * @member {number} imgHeight\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t */\n\t\tthis.imgHeight = 0.0;\n\t\t/**\n\t\t * The image's aspect ratio (width / height).\n\t\t * @member {number} imgAspectRatio\n\t\t * @memberof OpenSeadragonImaging.ImagingHelper#\n\t\t */\n\t\tthis.imgAspectRatio = 0.0;\n\n\t\t// Private\n\t\tthis._zoomFactor = 1.0;\n\t\tthis._minZoom = 0.001;\n\t\tthis._maxZoom = 10;\n\t\tthis._zoomStepPercent = 30;\n\t\tthis._haveImage = false;\n\t\tthis._viewerSize = null;\n\t\t// Unadjusted viewport settings (aspect ratio not applied)\n\t\t// All coordinates are logical (0 to 1) relative to the image\n\t\tthis._viewportWidth = 0.0;\n\t\tthis._viewportHeight = 0.0;\n\t\tthis._viewportOrigin = new OpenSeadragon.Point(0, 0);\n\t\tthis._viewportCenter = new OpenSeadragon.Point(0, 0);\n\n\t\t// Wire up event handlers\n\t\tif (options.onImageViewChanged) {\n\t\t\tthis.addHandler('image-view-changed', options.onImageViewChanged);\n\t\t}\n\t\tthis._viewer.addHandler('open', OSD.delegate(this, onOpen));\n\t\tthis._viewer.addHandler('close', OSD.delegate(this, onClose));\n\t\tthis._viewer.addHandler('animation', OSD.delegate(this, onAnimation));\n\t\tthis._viewer.addHandler('animation-finish', OSD.delegate(this, onAnimationFinish));\n\t\tthis._viewer.addHandler('resize', OSD.delegate(this, onResize));\n\t\tthis._viewer.addHandler('full-page', OSD.delegate(this, onFullPage));\n\t\tthis._viewer.addHandler('full-screen', OSD.delegate(this, onFullScreen));\n\n\t\tthis._viewer.world.addHandler('add-item', OSD.delegate(this, onWorldAddItem));\n\t\tthis._viewer.world.addHandler('remove-item', OSD.delegate(this, onWorldRemoveItem));\n\t\tthis._viewer.world.addHandler('item-index-change', OSD.delegate(this, onWorldItemIndexChange));\n\t\tthis._viewer.world.addHandler('metrics-change', OSD.delegate(this, onWorldMetricsChange));\n\t};\n\n\t/**\n\t * ImagingHelper version.\n\t * @member {Object} OpenSeadragonImaging.ImagingHelper.version\n\t * @property {String} versionStr - The version number as a string ('major.minor.revision').\n\t * @property {Number} major - The major version number.\n\t * @property {Number} minor - The minor version number.\n\t * @property {Number} revision - The revision number.\n\t */\n\t$.ImagingHelper.version = {\n\t\tversionStr: '2.1.1'\n\t};\n\tvar versionSplits = $.ImagingHelper.version.versionStr.split('.');\n\t$.ImagingHelper.version.major = parseInt(versionSplits[0], 10);\n\t$.ImagingHelper.version.minor = parseInt(versionSplits[1], 10);\n\t$.ImagingHelper.version.revision = parseInt(versionSplits[2], 10);\n\n\n\t// Inherit OpenSeadragon.EventSource\n\t// TODO Drop IE<9 support and use these. For now we'll use the OpenSeadragon.extend() call below...\n\t//$.ImagingHelper.prototype = Object.create(OSD.EventSource.prototype);\n\t//Object.defineProperty($.ImagingHelper.prototype, 'constructor', {enumerable: false, value: $.ImagingHelper});\n\n\n\t// TODO Drop IE<9 support and use Object.create()/Object.defineProperty(). For now we'll inherit OpenSeadragon.EventSource this way...\n\tOSD.extend($.ImagingHelper.prototype, OSD.EventSource.prototype,\n\t/** @lends OpenSeadragonImaging.ImagingHelper.prototype */\n\t{\n\t\t/*\n\t\t *\n\t\t * Raises the {@link OpenSeadragonImaging.ImagingHelper.image-view-changed} event\n\t\t *\n\t\t * @private\n\t\t * @method\n\t\t *\n\t\t **/\n\t\t_raiseImageViewChanged: function () {\n\t\t\t/**\n\t\t\t * Raised whenever the viewer's zoom or pan changes and the ImagingHelper's properties have been updated.\n\t\t\t * @event image-view-changed\n\t\t\t * @memberof OpenSeadragonImaging.ImagingHelper\n\t\t\t * @type {Object}\n\t\t\t * @property {OpenSeadragonImaging.ImagingHelper} eventSource - A reference to the ImagingHelper which raised the event.\n\t\t\t * @property {number} viewportWidth - Width of viewport in logical coordinates.\n\t\t\t * @property {number} viewportHeight - Height of viewport in logical coordinates.\n\t\t\t * @property {external:\"OpenSeadragon.Point\"} viewportOrigin - Center of viewport in logical coordinates.\n\t\t\t * @property {external:\"OpenSeadragon.Point\"} viewportCenter - Center of viewport in logical coordinates.\n\t\t\t * @property {number} zoomFactor - Zoom factor.\n\t\t\t * @property {Object} [userData=null] - Arbitrary subscriber-defined object.\n\t\t\t */\n\t\t\tthis.raiseEvent('image-view-changed', {\n\t\t\t\tviewportWidth:  this._viewportWidth,\n\t\t\t\tviewportHeight: this._viewportHeight,\n\t\t\t\tviewportOrigin: this._viewportOrigin,\n\t\t\t\tviewportCenter: this._viewportCenter,\n\t\t\t\tzoomFactor:     this._zoomFactor\n\t\t\t});\n\t\t},\n\n\t\t/*\n\t\t *\n\t\t * Called whenever the OpenSeadragon viewer zoom/pan changes\n\t\t *\n\t\t * @private\n\t\t * @method\n\t\t * @fires OpenSeadragonImaging.ImagingHelper.image-view-changed\n\t\t *\n\t\t **/\n\t\t_trackZoomPan: function () {\n\t\t\tvar boundsRect = this._viewer.viewport.getBounds(true);\n\t\t\tthis._viewportOrigin.x = boundsRect.x;\n\t\t\tthis._viewportOrigin.y = boundsRect.y * this.imgAspectRatio;\n\t\t\tthis._viewportWidth = boundsRect.width;\n\t\t\tthis._viewportHeight = boundsRect.height * this.imgAspectRatio;\n\t\t\tthis._viewportCenter.x = this._viewportOrigin.x + (this._viewportWidth / 2.0);\n\t\t\tthis._viewportCenter.y = this._viewportOrigin.y + (this._viewportHeight / 2.0);\n\t\t\tthis._zoomFactor = this.getViewerContainerSize().x / (this._viewportWidth * this.imgWidth);\n\n\t\t\tthis._raiseImageViewChanged();\n\t\t},\n\n\t\t/**\n\t\t * Gets the size of the viewer's container element.\n\t\t *\n\t\t * @method\n\t\t * @returns {external:\"OpenSeadragon.Point\"}\n\t\t *\n\t\t **/\n\t\tgetViewerContainerSize: function () {\n\t\t\t//return this._viewer.viewport.getContainerSize();\n\t\t\tvar element = this._viewer.container;\n\t\t\t//return new OSD.Point(\n\t\t\t//    (element.clientWidth === 0 ? 1 : element.clientWidth),\n\t\t\t//    (element.clientHeight === 0 ? 1 : element.clientHeight)\n\t\t\t//);\n\t\t\treturn new OSD.Point(element.clientWidth, element.clientHeight);\n\t\t},\n\n\t\t/**\n\t\t * Helper method for users of the OpenSeadragon.Viewer's autoResize = false option.\n\t\t * Call this whenever the viewer is resized, and the image will stay displayed at the same scale\n\t\t * and same center point.\n\t\t *\n\t\t * @method\n\t\t * @fires OpenSeadragonImaging.ImagingHelper.image-view-changed\n\t\t *\n\t\t **/\n\t\tnotifyResize: function () {\n\t\t\tvar newViewerSize,\n\t\t\t\tcenter,\n\t\t\t\tzoom;\n\t\t\tif (this._haveImage) {\n\t\t\t\tnewViewerSize = this.getViewerContainerSize();\n\t\t\t\tif (!newViewerSize.equals(this._viewerSize)) {\n\t\t\t\t\tthis._viewerSize = newViewerSize;\n\t\t\t\t\tcenter = new OpenSeadragon.Point(this._viewportCenter.x, this._viewportCenter.y / this.imgAspectRatio);\n\t\t\t\t\tzoom = this._zoomFactor;\n\t\t\t\t\tthis._viewer.viewport.resize(newViewerSize, false);\n\t\t\t\t\tthis._viewer.viewport.zoomTo((zoom * this.imgWidth) / newViewerSize.x, null, true);\n\t\t\t\t\tthis._viewer.viewport.panTo(center, true);\n\t\t\t\t\tthis._raiseImageViewChanged();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Gets the minimum zoom factor allowed.\n\t\t *\n\t\t * @method\n\t\t * @returns {number}\n\t\t *\n\t\t **/\n\t\tgetMinZoom: function () {\n\t\t\treturn this._minZoom;\n\t\t},\n\n\t\t/**\n\t\t * Sets the minimum zoom factor allowed.\n\t\t *\n\t\t * @method\n\t\t * @param {number} value - The desired minimum zoom factor.\n\t\t *\n\t\t **/\n\t\tsetMinZoom: function (value) {\n\t\t\tthis._minZoom = value;\n\t\t\tthis._viewer.minZoomLevel = (value * this.imgWidth) / this.getViewerContainerSize().x;\n\t\t},\n\n\t\t/**\n\t\t * Gets the maximum zoom factor allowed.\n\t\t *\n\t\t * @method\n\t\t * @returns {number}\n\t\t *\n\t\t **/\n\t\tgetMaxZoom: function () {\n\t\t\treturn this._maxZoom;\n\t\t},\n\n\t\t/**\n\t\t * Sets the maximum zoom factor allowed.\n\t\t *\n\t\t * @method\n\t\t * @param {number} value - The desired maximum zoom factor.\n\t\t *\n\t\t **/\n\t\tsetMaxZoom: function (value) {\n\t\t\tthis._maxZoom = value;\n\t\t\tthis._viewer.maxZoomLevel = (value * this.imgWidth) / this.getViewerContainerSize().x;\n\t\t},\n\n\t\t/**\n\t\t * Gets the percentage of the current zoom factor to increase/decrease when using the zoomIn/zoomOut methods.\n\t\t *\n\t\t * @method\n\t\t * @returns {number}\n\t\t *\n\t\t **/\n\t\tgetZoomStepPercent: function () {\n\t\t\treturn this._zoomStepPercent;\n\t\t},\n\n\t\t/**\n\t\t * Sets the percentage of the current zoom factor to increase/decrease when using the zoomIn/zoomOut methods.\n\t\t *\n\t\t * @method\n\t\t * @param {number} value - The desired percentage.\n\t\t *\n\t\t **/\n\t\tsetZoomStepPercent: function (value) {\n\t\t\tthis._zoomStepPercent = value;\n\t\t},\n\n\t\t/**\n\t\t * Zooms and/or pans the viewport based on a viewport width and center point.\n\t\t *\n\t\t * @method\n\t\t * @param {number} width - The desired viewport width in logical units.\n\t\t * @param {number} height - The desired viewport width in logical units (currently not used, native image aspect ratio is preserved).\n\t\t * @param {external:\"OpenSeadragon.Point\"} centerpoint - The desired viewport center point in logical units.\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tsetView: function (width, height, centerpoint, immediately) {\n\t\t\tif (this._haveImage) {\n\t\t\t\tif (this._viewportWidth !== width || this._viewportHeight !== height) {\n\t\t\t\t\tthis._viewer.viewport.zoomTo(1.0 / width, null, immediately);\n\t\t\t\t}\n\t\t\t\tif (this._viewportCenter.x !== centerpoint.x || this._viewportCenter.y !== centerpoint.y) {\n\t\t\t\t\tthis._viewer.viewport.panTo(new OpenSeadragon.Point(centerpoint.x, centerpoint.y / this.imgAspectRatio), immediately);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Gets the current zoom factor, the ratio of the displayed size to the image's native size.\n\t\t *\n\t\t * @method\n\t\t * @returns {number}\n\t\t *\n\t\t **/\n\t\tgetZoomFactor: function () {\n\t\t\treturn this._zoomFactor;\n\t\t},\n\n\t\t/**\n\t\t * Sets the zoom factor, the ratio of the displayed size to the image's native size.\n\t\t *\n\t\t * @method\n\t\t * @param {number} value - The desired zoom factor.\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tsetZoomFactor: function (value, immediately) {\n\t\t\tif (this._haveImage && value !== this._zoomFactor && value > 0.0) {\n\t\t\t\tthis._viewer.viewport.zoomTo((value * this.imgWidth) / this.getViewerContainerSize().x,\n\t\t\t\t\t\tnew OpenSeadragon.Point(this._viewportCenter.x, this._viewportCenter.y / this.imgAspectRatio), immediately);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Zooms in by a factor of getZoomStepPercent().\n\t\t *\n\t\t * @method\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tzoomIn: function (immediately) {\n\t\t\tvar newzoom = this._zoomFactor;\n\t\t\tnewzoom *= (1.0 + this._zoomStepPercent / 100.0);\n\t\t\tif (newzoom > this._maxZoom) {\n\t\t\t\tnewzoom = this._maxZoom;\n\t\t\t}\n\t\t\tthis.setZoomFactor(newzoom, immediately);\n\t\t},\n\n\t\t/**\n\t\t * Zooms out by a factor of getZoomStepPercent().\n\t\t *\n\t\t * @method\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tzoomOut: function (immediately) {\n\t\t\tvar newzoom = this._zoomFactor;\n\t\t\tnewzoom /= (1.0 + this._zoomStepPercent / 100.0);\n\t\t\tif (newzoom < this._minZoom) {\n\t\t\t\tnewzoom = this._minZoom;\n\t\t\t}\n\t\t\tthis.setZoomFactor(newzoom, immediately);\n\t\t},\n\n\t\t/**\n\t\t * Sets the zoom factor, the ratio of the displayed size to the image's native size, leaving the logical point in the same viewer position.\n\t\t *\n\t\t * @method\n\t\t * @param {number} newzoomfactor - The desired zoom factor.\n\t\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The logical point to remain in current displayed position.\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tzoomAboutLogicalPoint: function (newzoomfactor, logpoint, immediately) {\n\t\t\tif (this._haveImage && newzoomfactor !== this._zoomFactor && newzoomfactor > 0.0) {\n\t\t\t\tthis._viewer.viewport.zoomTo((newzoomfactor * this.imgWidth) / this.getViewerContainerSize().x,\n\t\t\t\t\t\t\tnew OpenSeadragon.Point(logpoint.x, logpoint.y / this.imgAspectRatio), immediately);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Zooms in by a factor of getZoomStepPercent(), leaving the logical point in the same viewer position.\n\t\t *\n\t\t * @method\n\t\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The logical point to remain in current displayed position.\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tzoomInAboutLogicalPoint: function (logpoint, immediately) {\n\t\t\tvar newzoom = this._zoomFactor;\n\t\t\tnewzoom *= (1.0 + this._zoomStepPercent / 100.0);\n\t\t\tif (newzoom > this._maxZoom) {\n\t\t\t\tnewzoom = this._maxZoom;\n\t\t\t}\n\t\t\tthis.zoomAboutLogicalPoint(newzoom, logpoint, immediately);\n\t\t},\n\n\t\t/**\n\t\t * Zooms out by a factor of getZoomStepPercent(), leaving the logical point in the same viewer position.\n\t\t *\n\t\t * @method\n\t\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The logical point to remain in current displayed position.\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tzoomOutAboutLogicalPoint: function (logpoint, immediately) {\n\t\t\tvar newzoom = this._zoomFactor;\n\t\t\tnewzoom /= (1.0 + this._zoomStepPercent / 100.0);\n\t\t\tif (newzoom < this._minZoom) {\n\t\t\t\tnewzoom = this._minZoom;\n\t\t\t}\n\t\t\tthis.zoomAboutLogicalPoint(newzoom, logpoint, immediately);\n\t\t},\n\n\t\t/**\n\t\t * Pans the view so the logical point is centered in the viewport.\n\t\t *\n\t\t * @method\n\t\t * @param {external:\"OpenSeadragon.Point\"} logpoint - The desired center point.\n\t\t * @param {boolean} [immediately] - If true, the view is set immediately with no spring animation.\n\t\t *\n\t\t **/\n\t\tcenterAboutLogicalPoint: function (logpoint, immediately) {\n\t\t\tif (this._haveImage && (this._viewportCenter.x !== logpoint.x || this._viewportCenter.y !== logpoint.y)) {\n\t\t\t\tthis._viewer.viewport.panTo(new OpenSeadragon.Point(logpoint.x, logpoint.y / this.imgAspectRatio), immediately);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToLogicalPoint: function (point) {\n\t\t\treturn new OpenSeadragon.Point(this.physicalToLogicalX(point.x), this.physicalToLogicalY(point.y));\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToPhysicalPoint: function (point) {\n\t\t\treturn new OpenSeadragon.Point(this.logicalToPhysicalX(point.x), this.logicalToPhysicalY(point.y));\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToLogicalX: function (x) {\n\t\t\treturn this._haveImage ? (this._viewportOrigin.x + ((x / this.getViewerContainerSize().x) * this._viewportWidth)) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToLogicalY: function (y) {\n\t\t\treturn this._haveImage ? (this._viewportOrigin.y + ((y / this.getViewerContainerSize().y) * this._viewportHeight)) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToPhysicalX: function (x) {\n\t\t\treturn this._haveImage ? (((x - this._viewportOrigin.x) / this._viewportWidth) * this.getViewerContainerSize().x) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToPhysicalY: function (y) {\n\t\t\treturn this._haveImage ? (((y - this._viewportOrigin.y) / this._viewportHeight) * this.getViewerContainerSize().y) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToLogicalDistance: function (distance) {\n\t\t\treturn this._haveImage ? ((distance / this.getViewerContainerSize().x) * this._viewportWidth) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToPhysicalDistance: function (distance) {\n\t\t\treturn this._haveImage ? ((distance / this._viewportWidth) * this.getViewerContainerSize().x) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToDataPoint: function (point) {\n\t\t\treturn new OpenSeadragon.Point(this.logicalToDataX(point.x), this.logicalToDataY(point.y));\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tdataToLogicalPoint: function (point) {\n\t\t\treturn new OpenSeadragon.Point(this.dataToLogicalX(point.x), this.dataToLogicalY(point.y));\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToDataPoint: function (point) {\n\t\t\tif (this._viewer.world.getItemCount() === 1) {\n\t\t\t\treturn new OpenSeadragon.Point(this.physicalToDataX(point.x), this.physicalToDataY(point.y));\n\t\t\t} else {\n\t\t\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\t\t\t\treturn tiledImage.viewerElementToImageCoordinates(point);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tdataToPhysicalPoint: function (point) {\n\t\t\treturn new OpenSeadragon.Point(this.dataToPhysicalX(point.x), this.dataToPhysicalY(point.y));\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToDataX: function (x) {\n\t\t\treturn this._haveImage ? (x * this.imgWidth) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tlogicalToDataY: function (y) {\n\t\t\treturn this._haveImage ? (y * this.imgHeight) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tdataToLogicalX: function (x) {\n\t\t\treturn (this._haveImage && this.imgWidth > 0) ? (x / this.imgWidth) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tdataToLogicalY: function (y) {\n\t\t\treturn (this._haveImage && this.imgHeight > 0) ? (y / this.imgHeight) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToDataX: function (x) {\n\t\t\tif (this._viewer.world.getItemCount() === 1) {\n\t\t\t\treturn (this._haveImage && this.getViewerContainerSize().x > 0) ? ((this._viewportOrigin.x + ((x / this.getViewerContainerSize().x) * this._viewportWidth)) * this.imgWidth) : 0;\n\t\t\t} else {\n\t\t\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\t\t\t\tvar pt = tiledImage.viewerElementToImageCoordinates(new OpenSeadragon.Point(x, 0));//viewportToImageCoordinates x,y,cur or point,cur\n\t\t\t\treturn pt.x;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tphysicalToDataY: function (y) {\n\t\t\tif (this._viewer.world.getItemCount() === 1) {\n\t\t\t\treturn (this._haveImage && this.getViewerContainerSize().y > 0) ?\n\t\t\t\t\t\t\t((this._viewportOrigin.y + ((y / this.getViewerContainerSize().y) * this._viewportHeight)) * this.imgHeight) : 0;\n\t\t\t} else {\n\t\t\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\t\t\t\tvar pt = tiledImage.viewerElementToImageCoordinates(new OpenSeadragon.Point(0, y));//viewportToImageCoordinates x,y,cur or point,cur\n\t\t\t\treturn pt.y;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tdataToPhysicalX: function (x) {\n\t\t\treturn (this._haveImage && this.imgWidth > 0) ? ((((x / this.imgWidth) - this._viewportOrigin.x) / this._viewportWidth) * this.getViewerContainerSize().x) : 0;\n\t\t},\n\n\t\t/**\n\t\t *\n\t\t *\n\t\t * @method\n\t\t *\n\t\t **/\n\t\tdataToPhysicalY: function (y) {\n\t\t\treturn (this._haveImage && this.imgHeight > 0) ? ((((y / this.imgHeight) - this._viewportOrigin.y) / this._viewportHeight) * this.getViewerContainerSize().y) : 0;\n\t\t}\n\n\t});\n\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onOpen(event) {\n\t\tOSD.console.log('!!! [onOpen]');\n\t\tvar tiledImage = this._viewer.world.getItemAt(this._worldIndex);\n\n\t\tthis._haveImage = true;\n\t\tthis.imgWidth = tiledImage.source.dimensions.x;\n\t\tthis.imgHeight = tiledImage.source.dimensions.y;\n\t\tthis.imgAspectRatio = this.imgWidth / this.imgHeight;\n\n\t\tthis._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onClose() {\n\t\tOSD.console.log('!!! [onClose]');\n\t\tthis._haveImage = false;\n\t\tthis.imgWidth = 0.0;\n\t\tthis.imgHeight = 0.0;\n\t\tthis.imgAspectRatio = 0.0;\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onAnimation() {\n\t\tthis._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onAnimationFinish() {\n\t\tthis._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onResize() {\n\t\tif (this._viewer && this._viewer.autoResize) {\n\t\t\tthis._trackZoomPan();\n\t\t}\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onFullPage() {\n\t\tthis._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onFullScreen() {\n\t\tthis._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onWorldAddItem(event) {\n\t\t//OSD.console.log( '!!! onWorldAddItem', request.status, url );\n\t\tOSD.console.log('!!! [onWorldAddItem]');\n\t\t// this._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onWorldRemoveItem(event) {\n\t\tOSD.console.log('!!! [onWorldRemoveItem]');\n\t\t// this._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onWorldItemIndexChange(event) {\n\t\tOSD.console.log('!!! [onWorldItemIndexChange]');\n\t\t// this._trackZoomPan();\n\t}\n\n\t/*\n\t * @private\n\t * @method\n\t *\n\t **/\n\tfunction onWorldMetricsChange(event) {\n\t\tOSD.console.log('!!! [onWorldMetricsChange]');\n\t\t// this._trackZoomPan();\n\t}\n\n\treturn $.ImagingHelper;\n}(OpenSeadragon || window.OpenSeadragon, window.OpenSeadragonImaging = window.OpenSeadragonImaging || {}));\n"],"sourceRoot":""}